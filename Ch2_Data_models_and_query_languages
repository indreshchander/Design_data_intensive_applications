
=> It can take a lot of effort to master just one data model (think how many books there are on relational data modeling). 
Building software is hard enough, even when work‐ ing with just one data model and without worrying about its inner workings. 
But since the data model has such a profound effect on what the software above it can and can’t do, it’s important to 
choose one that is appropriate to the application. 
			
=> The Object-Relational Mismatch: Most application development today is done in object-oriented programming languages, 
which leads to a common criticism of the SQL data model: if data is stored in relational tables, an awkward translation 
layer is required between the objects in the 	application code and the database model of tables, rows, and columns. 
The disconnect between the models is sometimes called an impedance mismatch.i 
			
=> If the data in your application has a document-like structure (i.e., a tree of one-to- many relationships, where typically 
the entire tree is loaded at once), then it’s proba‐bly a good idea to use a document model. The relational technique of 
shredding— splitting a document-like structure into multiple tables (like positions, education, and contact_info in Figure 2-1)—can lead 
to cumbersome schemas and unnecessa‐rily complicated application code. 

if your application does use many-to-many relationships, the document model becomes less appealing. It’s possible to reduce the need
for joins by denormal‐ izing, but then the application code needs to do additional work to keep the denormalized data consistent. 
Joins can be emulated in application code by making multiple requests to the database, but that also moves complexity into the 
application and is usually slower than a join performed by specialized code inside the database. In such cases, using a document 
model can lead to significantly more complex application code and worse performance 

It’s not possible to say in general which data model leads to simpler application code; it depends on the kinds of relationships 
that exist between data items. For highly interconnected data, the document model is awkward, the relational model is acceptable, 
and graph models (see “Graph-Like Data Models” on page 49) are the most natural. 
					
=> Document databases are sometimes called schemaless, but that’s misleading, as the code that reads the data usually assumes 
some kind of structure—i.e., there is an implicit schema, but it is not enforced by the database [20]. A more accurate term is schema-on-read 
(the structure of the data is implicit, and only interpreted when the data is read), in contrast with schema-on-write (the traditional 
approach of relational databases, where the schema is explicit and the database ensures all written data con‐ forms to it) [21]. 
				
=> Document database: The locality advantage only applies if you need large parts of the document at the same time. 
The database typically needs to load the entire document, even if you access only a small portion of it, 
which can be wasteful on large documents. On updates to a document, the entire document usually needs to be 
rewritten—only modifications that don’t change the encoded size of a document can easily be per‐ formed in place [19]. 
For these reasons, it is generally recommended that you keep documents fairly small and avoid writes that increase 
the size of a document [9]. These performance limitations significantly reduce the set of situations in which document databases are useful.	
It’s worth pointing out that the idea of grouping related data together for locality is not limited to the document model. 
For example, Google’s Spanner database offers the same locality properties in a relational data model, by allowing the schema to 
declare that a table’s rows should be interleaved (nested) within a parent table [27]. Oracle allows the same, using a feature called 
multi-table index cluster tables [28]. The column-family concept in the Bigtable data model (used in Cassandra and HBase) has a similar purpose of managing locality [29]. 
				
=> Historically, data started out being represented as one big tree (the hierarchical model), but that wasn’t good for 
representing many-to-many relationships, so the relational model was invented to solve that problem. More recently, 
developers found that some applications don’t fit well in the relational model either. 

New nonrelational “NoSQL” datastores have diverged in two main directions:					
1. Document databases target use cases where data comes in self-contained documents and relationships between one document and another are rare.			
2. Graph databases go in the opposite direction, targeting use cases where anything is potentially related to everything.			
All three models (document, relational, and graph) are widely used today, and each is good in its respective domain. One model can be 
emulated in terms of another model —for example, graph data can  be represented in a relational database—but the result is often awkward. 
That’s why we have different systems for different purposes, not a single one-size-fits-all solution. 
				
		 	 	 		
			
				
					
One thing that document and graph databases have in common is that they typically don’t enforce a schema for the data they store, which can make it easier to adapt applications to changing requirements. However, your application most likely still assumes that data has a certain structure; it’s just a question of whether the schema is explicit (enforced on write) or implicit (handled on read). 
		
